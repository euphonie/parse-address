"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck")),_createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass")),_utils=_interopRequireDefault(require("./utils")),_grammarSpec=_interopRequireDefault(require("./grammarSpec")),_xregexp=_interopRequireDefault(require("xregexp")),AddressParser=/*#__PURE__*/function(){function a(b){(0,_classCallCheck2["default"])(this,a);var c=this;c.country=b,c.parser={},c.initialized=!1,c.rules={};var d=new _grammarSpec["default"];d.loadGrammars(),c.grammar=d.grammars[c.country]["default"]}return(0,_createClass2["default"])(a,[{key:"normalize_address",value:function normalize_address(a){if(!a)return null;var b={},c=this.grammar;return Object.keys(a).forEach(function(c){if(!(-1!==["input","index"].indexOf(c)||isFinite(c))){var d=isFinite(c.split("_").pop())?c.split("_").slice(0,-1).join("_"):c;a[c]&&(b[d]=a[c].trim().replace(/^\s+|\s+$/g,""))}}),_utils["default"].each(c.Normalization_Map,function(a,c){b[c]&&a[b[c].toLowerCase()]&&(b[c]=a[b[c].toLowerCase()])}),["type","type1","type2"].forEach(function(a){a in b&&(b[a]=b[a].charAt(0).toUpperCase()+b[a].slice(1).toLowerCase())}),b.city&&(b.city=_xregexp["default"].replace(b.city,(0,_xregexp["default"])("^(?<dircode>"+c.Address_Rules.dircode+")\\s+(?=\\S)","ix"),function(a){return _utils["default"].capitalize(c.Direction_Code[a.dircode.toUpperCase()])+" "})),b}},{key:"parseAddress",value:function parseAddress(a){var b=_xregexp["default"].exec(a,this.grammar.Address_Rules.address);return this.normalize_address(b)}},{key:"parseInformalAddress",value:function parseInformalAddress(a){var b=_xregexp["default"].exec(a,this.grammar.Address_Rules.informal_address);return this.normalize_address(b)}},{key:"parsePoAddress",value:function parsePoAddress(a){var b=_xregexp["default"].exec(a,this.grammar.Address_Rules.po_address);return this.normalize_address(b)}},{key:"parseLocation",value:function parseLocation(a){return(0,_xregexp["default"])(this.grammar.Address_Rules.corner,"xi").test(a)?this.parseIntersection(a):(0,_xregexp["default"])("^"+this.grammar.Address_Rules.po_box,"xi").test(a)?this.parsePoAddress(a):this.parseAddress(a)||this.parseInformalAddress(a)}},{key:"parseIntersection",value:function parseIntersection(a){var b=_xregexp["default"].exec(a,this.grammar.Address_Rules.intersection);if(b=this.normalize_address(b),b&&(b.type2=b.type2||"",b.type1=b.type1||"",b.type2&&!b.type1||b.type1===b.type2)){var c=b.type2;c=_xregexp["default"].replace(c,/s\W*$/,""),(0,_xregexp["default"])("^"+this.grammar.Address_Rules.type+"$","ix").test(c)&&(b.type1=b.type2=c)}return b}}]),a}();exports["default"]=AddressParser;
"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var _ca=_interopRequireDefault(require("../vocabulary/ca")),_utils=_interopRequireDefault(require("../utils")),_xregexp=_interopRequireDefault(require("xregexp")),Normalization_Map={prefix:_ca["default"].directional,prefix1:_ca["default"].directional,prefix2:_ca["default"].directional,suffix:_ca["default"].directional,suffix1:_ca["default"].directional,suffix2:_ca["default"].directional,type:_ca["default"].street_type,type1:_ca["default"].street_type,type2:_ca["default"].street_type,state:_ca["default"].state_code},Direction_Code=_utils["default"].invert(_ca["default"].directional),Address_Rules={};Address_Rules.type=_utils["default"].flatten(_ca["default"].street_type).sort().filter(function(a,b,c){return c.indexOf(a)===b}).join("|"),Address_Rules.fraction="\\d+\\/\\d+",Address_Rules.state="\\b(?:"+_utils["default"].keys(_ca["default"].state_code).concat(_utils["default"].values(_ca["default"].state_code)).map(_xregexp["default"].escape).join("|")+")\\b",Address_Rules.direct=_utils["default"].values(_ca["default"].directional).sort(function(c,a){return c.length<a.length}).reduce(function(a,b){return a.concat([_xregexp["default"].escape(b.replace(/\w/g,"$&.")),b])},_utils["default"].keys(_ca["default"].directional)).join("|"),Address_Rules.dircode=_utils["default"].keys(Direction_Code).join("|"),Address_Rules.corner="(?:\\band\\b|\\bat\\b|&|\\@)",Address_Rules.zip="(?<fsa>[A-Za-z][0-9][A-Za-z])[ ]?(?<ldu>[0-9][A-Za-z][0-9])?",Address_Rules.number="(?<unit_number>(\\d+)|([N|S|E|W]\\d{1,3}[N|S|E|W]\\d{1,6}))(?=\\D)(-)?(?<civic_number>(\\d+)?)",Address_Rules.street="\n(?:\n  (?:(?<street_0>".concat(Address_Rules.direct,")\\W+\n     (?<type_0>").concat(Address_Rules.type,")\\b\n  )\n  |\n  (?:(?<prefix_0>").concat(Address_Rules.direct,")\\W+)?\n  (?:\n    (?<street_1>[^,]*\\d)\n    (?:[^\\w,]*(?<suffix_1>").concat(Address_Rules.direct,")\\b)\n    |\n    (?<street_2>((?!((").concat(Address_Rules.type,")\\w))[^,])+)\n    (?:[^\\w,]+(?<type_2>").concat(Address_Rules.type,")\\b)\n    (?:[^\\w,]+(?<suffix_2>").concat(Address_Rules.direct,")\\b)?\n    |\n    (?<street_3>[^,]+?)\n    (?:[^\\w,]+(?<type_3>").concat(Address_Rules.type,")\\b)?\n    (?:[^\\w,]+(?<suffix_3>").concat(Address_Rules.direct,")\\b)?\n  )\n)"),Address_Rules.po_box="p\\W*(?:[om]|ost\\ ?office)\\W*b(?:ox)?",Address_Rules.sec_unit_type_numbered="\n(?<sec_unit_type_1>su?i?te\n  |".concat(Address_Rules.po_box,"\n  |(?:ap|dep)(?:ar)?(t|p)(?:me?nt)?\n  |bureau\n  |ro*m\n  |flo*r?\n  |uni?t\xE9?\n  |bu?i?ldi?n?g\n  |ha?nga?r\n  |lo?t\n  |pier\n  |slip\n  |spa?ce?\n  |stop\n  |tra?i?le?r\n  |box)(?![a-z]\n)\n"),Address_Rules.sec_unit_type_unnumbered="\n(?<sec_unit_type_2>ba?se?me?n?t\n  |fro?nt\n  |lo?bby\n  |lowe?r\n  |off?i?ce?\n  |pe?n?t?ho?u?s?e?\n  |rear\n  |side\n  |uppe?r\n)\\b",Address_Rules.sec_unit="\n(?:  #fix3\n  (?:  #fix1\n    (?:\n      (?:".concat(Address_Rules.sec_unit_type_numbered,"\\W*)\n      |(?<sec_unit_type_3>\\#)\\W*\n    )\n    (?<sec_unit_num_1>[\\w-]+)\n  )\n  |\n  ").concat(Address_Rules.sec_unit_type_unnumbered,"\n)"),Address_Rules.city_and_state="\n(?:\n  (?<city>[^\\d,]+?)\\W+\n  (?<state>".concat(Address_Rules.state,")\n)\n"),Address_Rules.place="\n(?:".concat(Address_Rules.city_and_state,"\\W*)?\n(?:").concat(Address_Rules.zip,")?\n"),Address_Rules.address=(0,_xregexp["default"])("\n^\n[^\\w\\#]*\n(".concat(Address_Rules.number,")\\W*\n(?:").concat(Address_Rules.fraction,"\\W*)?\n   ").concat(Address_Rules.street,"\\W+\n(?:").concat(Address_Rules.sec_unit,")?\\W*  #fix2\n    ").concat(Address_Rules.place,"\n\\W*$"),"ix");var sep="(?:\\W+|$)";// no support for \Z
Address_Rules.informal_address=(0,_xregexp["default"])("\n  ^\n  \\s*\n  (?:".concat(Address_Rules.sec_unit).concat("(?:\\W+|$)",")?\n  (?:").concat(Address_Rules.number,")?\\W*\n  (?:").concat(Address_Rules.fraction,"\\W*)?\n      ").concat(Address_Rules.street).concat("(?:\\W+|$)","\n  (?:").concat(Address_Rules.sec_unit.replace(/_\d/g,"$&1")).concat("(?:\\W+|$)",")?\n  (?:").concat(Address_Rules.place,")?\n  "),"ix"),Address_Rules.po_address=(0,_xregexp["default"])("\n  ^\n  \\s*\n  (?:".concat(Address_Rules.sec_unit.replace(/_\d/g,"$&1")).concat("(?:\\W+|$)",")?\n  (?:").concat(Address_Rules.place,")?\n  "),"ix"),Address_Rules.intersection=(0,_xregexp["default"])("\n  ^\\W*\n  ".concat(Address_Rules.street.replace(/_\d/g,"1$&"),"\\W*?\n  \\s+").concat(Address_Rules.corner,"\\s+\n  ").concat(Address_Rules.street.replace(/_\d/g,"2$&"),"($|\\W+)\n  ").concat(Address_Rules.place,"\\W*$"),"ix");var _default={Normalization_Map:Normalization_Map,Direction_Code:Direction_Code,Address_Rules:Address_Rules};exports["default"]=_default;
"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck")),_createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass")),_fs=require("fs"),GrammarSpecifications=/*#__PURE__*/function(){function a(){(0,_classCallCheck2["default"])(this,a),this.grammars={},this.loadGrammars()}return(0,_createClass2["default"])(a,[{key:"loadGrammars",value:function loadGrammars(){var a=this,b="".concat(__dirname,"/grammars/"),c=(0,_fs.readdirSync)(b);c.forEach(function(b){var c=b.split("."),d=c[1]||"unk";a.grammars[d]=require("".concat(__dirname,"/grammars/").concat(c[0],".").concat(c[1]))})}}]),a}();exports["default"]=GrammarSpecifications;
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var invert=function(a){var b={};return keys(a).forEach(function(c){b[a[c]]=c}),b},flatten=function(a){return keys(a).concat(values(a))},values=function(a){var b=[];return keys(a).forEach(function(c){b.push(a[c])}),b},each=function(a,b){keys(a).forEach(function(c){b(a[c],c)})},keys=function(a){return Object.keys(a)},capitalize=function(a){return a&&a[0].toUpperCase()+a.slice(1)},_default={invert:invert,flatten:flatten,values:values,each:each,keys:keys,capitalize:capitalize};exports["default"]=_default;
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var _default={directional:{north:"N",northeast:"NE",east:"E",southeast:"SE",south:"S",southwest:"SW",west:"W",northwest:"NW"},street_type:{abbey:"abbey",acres:"acres",allee:"aly",alley:"aly",ally:"aly",anex:"anx",annex:"anx",annx:"anx",arcade:"arc",autoroute:"autr",av:"ave",aven:"ave",avenu:"ave",avenue:"ave",avn:"ave",avnue:"ave",bay:"bay",bayoo:"byu",bayou:"byu",beach:"bch",bend:"bnd",bluf:"blf",bluff:"blf",bluffs:"blfs",bot:"btm",bottm:"btm",bottom:"btm",boul:"blvd",boulevard:"blvd",boulv:"blvd",branch:"br",brdge:"brg",bridge:"brg",brnch:"br",brook:"brk",brooks:"brks",burg:"bg",burgs:"bgs",bypa:"byp",bypas:"byp",bypass:"byp",byps:"byp",camp:"cp",campus:"campus",canyn:"cyn",canyon:"cyn",cape:"cpe",carre:"car",carrefour:"carref",causeway:"cswy",causway:"cswy",causwa:"cswy",cen:"ctr",cent:"ctr",center:"ctr",centers:"ctrs",centr:"ctr",centre:"ctr",cercle:"cercle",circ:"cir",circl:"cir",circle:"cir",circles:"cirs",chase:"chase",chemin:"ch",circuit:"circt",close:"close",ck:"crk",cliff:"clf",cliffs:"clfs",club:"clb",cmp:"cp",cnter:"ctr",cntr:"ctr",cnyn:"cyn",common:"cmn",commons:"cmns",concession:"conc",corner:"cor",corners:"cors",course:"crse",cour:"cour",cours:"cours",court:"crt",courts:"cts",cove:"cove",coves:"cvs",cr:"crk",crcl:"cir",crcle:"cir",crecent:"cres",creek:"crk",crescent:"cres",cresent:"cres",crest:"crst",croissant:"crois",crossing:"cross",crossroad:"xrd",crossroads:"xrds",crscnt:"cres",crsent:"cres",crsnt:"cres",crssing:"cross",crssng:"cross",crt:"ct",curve:"curv",dale:"dale",dell:"dell",dam:"dm",div:"dv",divide:"dv",diversion:"divers",downs:"downs",driv:"dr",drive:"dr",drives:"drs",drv:"dr",dvd:"dv",end:"end",estate:"est",estates:"ests",exp:"expy",expr:"expy",express:"expy",expressway:"expy",expw:"expy",extension:"ext",extensions:"exts",extn:"ext",extnsn:"ext",fall:"fall",falls:"fls",farm:"farm",ferry:"fry",field:"field",fields:"flds",flat:"flt",flats:"flts",ford:"frd",fords:"frds",forest:"forest",forests:"forest",forg:"frg",forge:"frg",forges:"frgs",fork:"frk",forks:"frks",fort:"ft",freeway:"fwy",freewy:"fwy",frry:"fry",frt:"ft",front:"front",frnt:"front",frway:"fwy",frwy:"fwy",garden:"gdn",gardens:"gdns",gardn:"gdn",gate:"gate",gateway:"gtwy",gatewy:"gtwy",gatway:"gtwy",glen:"gln",glens:"glns",grden:"gdn",grdn:"gdn",grdns:"gdns",green:"grn",greens:"grns",grov:"grv",grove:"grv",groves:"grvs",grounds:"grnds",gtway:"gtwy",harb:"hbr",harbor:"hbr",harbors:"hbrs",harbr:"hbr",haven:"hvn",havn:"hvn",height:"hts",heights:"hts",hgts:"hts",highway:"hwy",highwy:"hwy",hill:"hl",hills:"hls",hiway:"hwy",hiwy:"hwy",hllw:"holw",hollow:"holw",hollows:"holw",holws:"holw",hrbor:"hbr",ht:"hts",hway:"hwy",inlet:"inlt",island:"is",islands:"iss",isles:"isle",islnd:"is",islnds:"iss",jction:"jct",jctn:"jct",jctns:"jcts",junction:"jct",junctions:"jcts",junctn:"jct",juncton:"jct",key:"ky",keys:"kys",knol:"knl",knoll:"knl",knolls:"knls",la:"ln",lake:"lk",lakes:"lks",land:"land",landing:"lndg",lane:"ln",lanes:"ln",ldge:"ldg",light:"lgt",lights:"lgts",lndng:"lndg",loaf:"lf",lock:"lck",locks:"lcks",lodg:"ldg",lodge:"ldg",loops:"loop",mall:"mall",manor:"mnr",manors:"mnrs",meadow:"mdw",meadows:"mdws",medows:"mdws",mews:"mews",mill:"ml",mills:"mls",mission:"msn",missn:"msn",mnt:"mt",mntain:"mtn",mntn:"mtn",mntns:"mtns",motorway:"mtwy",mount:"mt",mountain:"mtn",mountains:"mtns",mountin:"mtn",mssn:"msn",mtin:"mtn",neck:"nck",orchard:"orch",orchrd:"orch",overpass:"opas",ovl:"oval",parks:"park",parkway:"pkwy",parkways:"pkwy",parkwy:"pkwy",pass:"pass",passage:"psge",paths:"path",pikes:"pike",pine:"pne",pines:"pnes",pk:"park",pkway:"pkwy",pkwys:"pkwy",pky:"pkwy",place:"pl",plain:"pln",plaines:"plns",plains:"plns",plaza:"plz",plza:"plz",point:"pt",points:"pts",port:"prt",ports:"prts",prairie:"pr",prarie:"pr",prk:"park",prr:"pr",rad:"radl",radial:"radl",radiel:"radl",ranch:"rnch",ranches:"rnch",rapid:"rpd",rapids:"rpds",rdge:"rdg",rest:"rst",ridge:"rdg",ridges:"rdgs",river:"riv",rivr:"riv",rnchs:"rnch",road:"rd",roads:"rds",route:"rte",rvr:"riv",row:"row",rue:"rue",run:"run",shoal:"shl",shoals:"shls",shoar:"shr",shoars:"shrs",shore:"shr",shores:"shrs",skyway:"skwy",spng:"spg",spngs:"spgs",spring:"spg",springs:"spgs",sprng:"spg",sprngs:"spgs",spurs:"spur",sqr:"sq",sqre:"sq",sqrs:"sqs",squ:"sq",square:"sq",squares:"sqs",station:"sta",statn:"sta",stn:"sta",str:"st",strav:"stra",strave:"stra",straven:"stra",stravenue:"stra",stravn:"stra",stream:"strm",street:"st",streets:"sts",streme:"strm",strt:"st",strvn:"stra",strvnue:"stra",sumit:"smt",sumitt:"smt",summit:"smt",terr:"ter",terrace:"ter",throughway:"trwy",tpk:"tpke",tr:"trl",trace:"trce",traces:"trce",track:"trak",tracks:"trak",trafficway:"trfy",trail:"trl",trails:"trl",trk:"trak",trks:"trak",trls:"trl",trnpk:"tpke",trpk:"tpke",tunel:"tunl",tunls:"tunl",tunnel:"tunl",tunnels:"tunl",tunnl:"tunl",turnpike:"tpke",turnpk:"tpke",underpass:"upas",union:"un",unions:"uns",valley:"vly",valleys:"vlys",vally:"vly",vdct:"via",viadct:"via",viaduct:"via",view:"vw",views:"vws",vill:"vlg",villag:"vlg",village:"vlg",villages:"vlgs",ville:"vl",villg:"vlg",villiage:"vlg",vist:"vis",vista:"vis",vlly:"vly",vst:"vis",vsta:"vis",wall:"wall",walks:"walk",well:"wl",wells:"wls",wood:"wood",wy:"way"},state_code:{alberta:"AB","british Columbia":"BC","colombie-britannique":"BC","colombie britannique":"BC",manitoba:"MB","new brunswick":"NB","nouveau-brunswick":"NB","nouveau brunswick":"NB","newfoundland and labrador":"NL","terre-neuve-et-labrador":"NL","terre neuve et labrador":"NL","northwest territories":"NT","territoires du nord-ouest":"NT","territoires du nord ouest":"NT","nova scotia":"NS","nouvelle-écosse":"NS","nouvelle écosse":"NS",nunavut:"NU",ontario:"ON","prince edward island":"PE","île-du-prince-édouard":"PE","île du prince édouard":"PE",québec:"QC",quebec:"QC",saskatchewan:"SK",yukon:"YT"}};exports["default"]=_default;
